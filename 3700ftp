#!/usr/bin/env python3
import argparse
import socket
import re
import os
import sys
from urllib.parse import urlparse

# Fixed credentials for FTP login
USERNAME = 'jonahc'
PASSWORD = '1b10da1e033405616a318b5edcb4ca077919f67f35fd99f48fcf34e2aa5e96d2'


def parse_arguments():
    parser = argparse.ArgumentParser(description='3700ftp: A simple FTP client.')
    parser.add_argument('operation', help='Operation to perform', choices=['ls', 'mkdir', 'rm', 'rmdir', 'cp', 'mv'])
    parser.add_argument('param1', help='First parameter: local path or FTP URL', nargs='?')
    parser.add_argument('param2', help='Second parameter: local path or FTP URL', nargs='?')
    return parser.parse_args()


def parse_ftp_url(ftp_url):
    parsed_url = urlparse(ftp_url)
    host = parsed_url.hostname
    port = parsed_url.port if parsed_url.port else 21
    path = parsed_url.path
    return host, port, path


def set_transfer_settings(control_socket):
    commands = [b'TYPE I\r\n', b'MODE S\r\n', b'STRU F\r\n']
    for command in commands:
        control_socket.sendall(command)
        response = control_socket.recv(1024).decode('utf-8')
        print(response)
        if not response.startswith('200'):
            raise Exception(
                f"Failed to set transfer settings with command {command.decode('utf-8').strip()}: {response}")


def connect_and_login(host, port=21):
    control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    control_socket.connect((host, port))
    print(control_socket.recv(1024).decode('utf-8'))  # Welcome message

    # Login process
    control_socket.sendall(f'USER {USERNAME}\r\n'.encode('utf-8'))
    print(control_socket.recv(1024).decode('utf-8'))
    control_socket.sendall(f'PASS {PASSWORD}\r\n'.encode('utf-8'))
    response = control_socket.recv(1024).decode('utf-8')
    print(response)

    # Check if login was successful
    if not response.startswith('230'):
        print("Login failed.")
        sys.exit(1)

    return control_socket


def enter_passive_mode(control_socket):
    control_socket.sendall(b'PASV\r\n')
    response = control_socket.recv(1024).decode('utf-8')
    print(response)

    match = re.search(r'\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\)', response)
    if not match:
        raise Exception("Failed to enter passive mode: Response parsing failed.")

    ip_address = '.'.join(match.group(i) for i in range(1, 5))
    port = (int(match.group(5)) << 8) + int(match.group(6))
    return ip_address, port


def establish_data_channel(control_socket):
    ip_address, port = enter_passive_mode(control_socket)
    data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    data_socket.connect((ip_address, port))
    return data_socket


def list_directory(control_socket, path):
    data_socket = establish_data_channel(control_socket)
    control_socket.sendall(f'LIST {path}\r\n'.encode('utf-8'))
    print(control_socket.recv(1024).decode('utf-8'))  # Response for LIST command initiation

    while True:
        data = data_socket.recv(1024)
        if not data:
            break
        print(data.decode('utf-8'))

    data_socket.close()
    print(control_socket.recv(1024).decode('utf-8'))  # Final response for LIST command


def make_directory(control_socket, path):
    control_socket.sendall(f'MKD {path}\r\n'.encode('utf-8'))
    print(control_socket.recv(1024).decode('utf-8'))


def delete_file(control_socket, path):
    control_socket.sendall(f'DELE {path}\r\n'.encode('utf-8'))
    print(control_socket.recv(1024).decode('utf-8'))


def delete_directory(control_socket, path):
    control_socket.sendall(f'RMD {path}\r\n'.encode('utf-8'))
    print(control_socket.recv(1024).decode('utf-8'))


def copy_file(control_socket, source, destination):
    # Determine if we are uploading or downloading based on the source format
    if os.path.isfile(source):  # Uploading a local file to FTP
        destination_host, destination_path = parse_ftp_url(destination)
        with open(source, 'rb') as file:
            data_socket = establish_data_channel(control_socket)
            control_socket.sendall(f'STOR {destination_path}\r\n'.encode('utf-8'))
            print(control_socket.recv(1024).decode('utf-8'))  # Response to STOR command
            data_socket.sendall(file.read())
            data_socket.close()
            print(control_socket.recv(1024).decode('utf-8'))  # Final response
    else:  # Downloading a file from FTP to local
        source_host, source_path = parse_ftp_url(source)
        data_socket = establish_data_channel(control_socket)
        control_socket.sendall(f'RETR {source_path}\r\n'.encode('utf-8'))
        print(control_socket.recv(1024).decode('utf-8'))  # Response to RETR command
        with open(destination, 'wb') as file:
            while True:
                data = data_socket.recv(1024)
                if not data:
                    break
                file.write(data)
        data_socket.close()
        print(control_socket.recv(1024).decode('utf-8'))  # Final response


def move_file(control_socket, source, destination):
    copy_file(control_socket, source, destination)
    # Determine if the source is an FTP URL to delete the remote file
    if source.startswith('ftp://'):
        source_host, source_path = parse_ftp_url(source)
        control_socket.sendall(f'DELE {source_path}\r\n'.encode('utf-8'))
        print(control_socket.recv(1024).decode('utf-8'))  # Response to DELE command
    else:  # Delete the local source file
        os.remove(source)


def perform_operation(args, control_socket):
    if args.operation in ['ls', 'mkdir', 'rm', 'rmdir']:
        # Operations that deal with paths directly
        _, _, path = parse_ftp_url(args.param1)
        if args.operation == 'ls':
            list_directory(control_socket, path)
        elif args.operation == 'mkdir':
            make_directory(control_socket, path)
        elif args.operation == 'rm':
            delete_file(control_socket, path)
        elif args.operation == 'rmdir':
            delete_directory(control_socket, path)
    elif args.operation == 'cp':
        copy_file(control_socket, args.param1, args.param2)
    elif args.operation == 'mv':
        move_file(control_socket, args.param1, args.param2)


def main():
    args = parse_arguments()

    if args.operation in ['cp', 'mv']:
        # Assuming the source is always the first parameter for cp and mv
        host, port, _ = parse_ftp_url(args.param1)
    else:
        # For other operations, use param1 which should be the FTP URL
        host, port, _ = parse_ftp_url(args.param1)

    control_socket = connect_and_login(host, port)
    perform_operation(args, control_socket)

    control_socket.sendall(b'QUIT\r\n')
    print(control_socket.recv(1024).decode('utf-8'))
    control_socket.close()


if __name__ == "__main__":
    main()
